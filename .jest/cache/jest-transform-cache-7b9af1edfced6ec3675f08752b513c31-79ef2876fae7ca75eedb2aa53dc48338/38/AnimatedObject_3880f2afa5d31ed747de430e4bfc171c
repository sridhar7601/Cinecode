b2927ae9a8601b049673bd2f11ba5c52
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.hasAnimatedNode = hasAnimatedNode;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var MAX_DEPTH = 5;
function isPlainObject(value) {
  return value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object);
}
function visit(value, fn) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (depth >= MAX_DEPTH) {
    return;
  }
  if (value instanceof _AnimatedNode.default) {
    fn(value);
  } else if (Array.isArray(value)) {
    value.forEach(function (element) {
      visit(element, fn, depth + 1);
    });
  } else if (isPlainObject(value)) {
    Object.values(value).forEach(function (element) {
      visit(element, fn, depth + 1);
    });
  }
}
function mapAnimatedNodes(value, fn) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (depth >= MAX_DEPTH) {
    return value;
  }
  if (value instanceof _AnimatedNode.default) {
    return fn(value);
  } else if (Array.isArray(value)) {
    return value.map(function (element) {
      return mapAnimatedNodes(element, fn, depth + 1);
    });
  } else if (isPlainObject(value)) {
    var result = {};
    for (var key in value) {
      result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
    }
    return result;
  } else {
    return value;
  }
}
function hasAnimatedNode(value) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  if (depth >= MAX_DEPTH) {
    return false;
  }
  if (value instanceof _AnimatedNode.default) {
    return true;
  } else if (Array.isArray(value)) {
    for (var element of value) {
      if (hasAnimatedNode(element, depth + 1)) {
        return true;
      }
    }
  } else if (isPlainObject(value)) {
    if (React.isValidElement(value)) {
      return false;
    }
    for (var key in value) {
      if (hasAnimatedNode(value[key], depth + 1)) {
        return true;
      }
    }
  }
  return false;
}
var AnimatedObject = exports.default = function (_AnimatedWithChildren) {
  function AnimatedObject(value) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedObject);
    _this = _callSuper(this, AnimatedObject);
    _this._value = value;
    return _this;
  }
  (0, _inherits2.default)(AnimatedObject, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedObject, [{
    key: "__getValue",
    value: function __getValue() {
      return mapAnimatedNodes(this._value, function (node) {
        return node.__getValue();
      });
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return mapAnimatedNodes(this._value, function (node) {
        return node.__getAnimatedValue();
      });
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var _this2 = this;
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedObject.prototype), "__attach", this).call(this);
      visit(this._value, function (node) {
        node.__addChild(_this2);
      });
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var _this3 = this;
      visit(this._value, function (node) {
        node.__removeChild(_this3);
      });
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedObject.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      visit(this._value, function (value) {
        value.__makeNative(platformConfig);
      });
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedObject.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'object',
        value: mapAnimatedNodes(this._value, function (node) {
          return {
            nodeTag: node.__getNativeTag()
          };
        })
      };
    }
  }]);
}(_AnimatedWithChildren2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,