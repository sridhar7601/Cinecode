344e7a8dfffd8e822a8c6b3fa2c6f409
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = dispatchCommand;
exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
exports.findNodeHandle = findNodeHandle;
exports.isProfilingRenderer = isProfilingRenderer;
exports.renderElement = renderElement;
exports.sendAccessibilityEvent = sendAccessibilityEvent;
exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
exports.unstable_batchedUpdates = unstable_batchedUpdates;
function renderElement(_ref) {
  var element = _ref.element,
    rootTag = _ref.rootTag,
    useFabric = _ref.useFabric,
    useConcurrentRoot = _ref.useConcurrentRoot;
  if (useFabric) {
    require('../Renderer/shims/ReactFabric').render(element, rootTag, null, useConcurrentRoot);
  } else {
    require('../Renderer/shims/ReactNative').render(element, rootTag);
  }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').findHostInstance_DEPRECATED(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').findNodeHandle(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
  if (global.RN$Bridgeless === true) {
    return require('../Renderer/shims/ReactFabric').dispatchCommand(handle, command, args);
  } else {
    return require('../Renderer/shims/ReactNative').dispatchCommand(handle, command, args);
  }
}
function sendAccessibilityEvent(handle, eventType) {
  return require('../Renderer/shims/ReactNative').sendAccessibilityEvent(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
  var rootTagAsNumber = rootTag;
  require('../Renderer/shims/ReactNative').unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
  return require('../Renderer/shims/ReactNative').unstable_batchedUpdates(fn, bookkeeping);
}
function isProfilingRenderer() {
  return Boolean(__DEV__);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXJFbGVtZW50IiwiX3JlZiIsImVsZW1lbnQiLCJyb290VGFnIiwidXNlRmFicmljIiwidXNlQ29uY3VycmVudFJvb3QiLCJyZXF1aXJlIiwicmVuZGVyIiwiZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEIiwiY29tcG9uZW50T3JIYW5kbGUiLCJmaW5kTm9kZUhhbmRsZSIsImRpc3BhdGNoQ29tbWFuZCIsImhhbmRsZSIsImNvbW1hbmQiLCJhcmdzIiwiZ2xvYmFsIiwiUk4kQnJpZGdlbGVzcyIsInNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQiLCJldmVudFR5cGUiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlQW5kUmVtb3ZlQ29udGFpbmVyIiwicm9vdFRhZ0FzTnVtYmVyIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJmbiIsImJvb2trZWVwaW5nIiwiaXNQcm9maWxpbmdSZW5kZXJlciIsIkJvb2xlYW4iLCJfX0RFVl9fIl0sInNvdXJjZXMiOlsiUmVuZGVyZXJJbXBsZW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge0VsZW1lbnQsIEVsZW1lbnRSZWYsIEVsZW1lbnRUeXBlfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7dHlwZSBSb290VGFnfSBmcm9tICcuL1Jvb3RUYWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRWxlbWVudCh7XG4gIGVsZW1lbnQsXG4gIHJvb3RUYWcsXG4gIHVzZUZhYnJpYyxcbiAgdXNlQ29uY3VycmVudFJvb3QsXG59OiB7XG4gIGVsZW1lbnQ6IEVsZW1lbnQ8RWxlbWVudFR5cGU+LFxuICByb290VGFnOiBudW1iZXIsXG4gIHVzZUZhYnJpYzogYm9vbGVhbixcbiAgdXNlQ29uY3VycmVudFJvb3Q6IGJvb2xlYW4sXG59KTogdm9pZCB7XG4gIGlmICh1c2VGYWJyaWMpIHtcbiAgICByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdEZhYnJpYycpLnJlbmRlcihcbiAgICAgIGVsZW1lbnQsXG4gICAgICByb290VGFnLFxuICAgICAgbnVsbCxcbiAgICAgIHVzZUNvbmN1cnJlbnRSb290LFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKS5yZW5kZXIoZWxlbWVudCwgcm9vdFRhZyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRDxURWxlbWVudFR5cGU6IEVsZW1lbnRUeXBlPihcbiAgY29tcG9uZW50T3JIYW5kbGU6ID8oRWxlbWVudFJlZjxURWxlbWVudFR5cGU+IHwgbnVtYmVyKSxcbik6ID9FbGVtZW50UmVmPEhvc3RDb21wb25lbnQ8bWl4ZWQ+PiB7XG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRChcbiAgICBjb21wb25lbnRPckhhbmRsZSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmROb2RlSGFuZGxlPFRFbGVtZW50VHlwZTogRWxlbWVudFR5cGU+KFxuICBjb21wb25lbnRPckhhbmRsZTogPyhFbGVtZW50UmVmPFRFbGVtZW50VHlwZT4gfCBudW1iZXIpLFxuKTogP251bWJlciB7XG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmZpbmROb2RlSGFuZGxlKFxuICAgIGNvbXBvbmVudE9ySGFuZGxlLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2hDb21tYW5kKFxuICBoYW5kbGU6IEVsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxtaXhlZD4+LFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M6IEFycmF5PG1peGVkPixcbik6IHZvaWQge1xuICBpZiAoZ2xvYmFsLlJOJEJyaWRnZWxlc3MgPT09IHRydWUpIHtcbiAgICAvLyBOb3RlOiB0aGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbiBpbiB0aGUgbGVnYWN5IGFuZCBuZXcgcmVuZGVyZXIuXG4gICAgLy8gSG93ZXZlciwgZXZhbHVhdGluZyB0aGUgb2xkIHJlbmRlcmVyIGNvbWVzIHdpdGggc29tZSBzaWRlIGVmZmVjdHMuXG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0RmFicmljJykuZGlzcGF0Y2hDb21tYW5kKFxuICAgICAgaGFuZGxlLFxuICAgICAgY29tbWFuZCxcbiAgICAgIGFyZ3MsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKS5kaXNwYXRjaENvbW1hbmQoXG4gICAgICBoYW5kbGUsXG4gICAgICBjb21tYW5kLFxuICAgICAgYXJncyxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kQWNjZXNzaWJpbGl0eUV2ZW50KFxuICBoYW5kbGU6IEVsZW1lbnRSZWY8SG9zdENvbXBvbmVudDxtaXhlZD4+LFxuICBldmVudFR5cGU6IHN0cmluZyxcbik6IHZvaWQge1xuICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKS5zZW5kQWNjZXNzaWJpbGl0eUV2ZW50KFxuICAgIGhhbmRsZSxcbiAgICBldmVudFR5cGUsXG4gICk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgdXNlZCBieSBBcHBSZWdpc3RyeSB0byB1bm1vdW50IGEgcm9vdCB3aGVuIHVzaW5nIHRoZSBvbGRcbiAqIFJlYWN0IE5hdGl2ZSByZW5kZXJlciAoUGFwZXIpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5tb3VudENvbXBvbmVudEF0Tm9kZUFuZFJlbW92ZUNvbnRhaW5lcihyb290VGFnOiBSb290VGFnKSB7XG4gIC8vICRGbG93RXhwZWN0ZWRFcnJvcltpbmNvbXBhdGlibGUtdHlwZV0gcm9vdFRhZyBpcyBhbiBvcGFxdWUgdHlwZSBzbyB3ZSBjYW4ndCByZWFsbHkgY2FzdCBpdCBhcyBpcy5cbiAgY29uc3Qgcm9vdFRhZ0FzTnVtYmVyOiBudW1iZXIgPSByb290VGFnO1xuICByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLnVubW91bnRDb21wb25lbnRBdE5vZGVBbmRSZW1vdmVDb250YWluZXIoXG4gICAgcm9vdFRhZ0FzTnVtYmVyLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM8VD4oXG4gIGZuOiBUID0+IHZvaWQsXG4gIGJvb2trZWVwaW5nOiBULFxuKTogdm9pZCB7XG4gIC8vIFRoaXMgZG9lc24ndCBhY3R1YWxseSBkbyBhbnl0aGluZyB3aGVuIGJhdGNoaW5nIHVwZGF0ZXMgZm9yIGEgRmFicmljIHJvb3QuXG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKFxuICAgIGZuLFxuICAgIGJvb2trZWVwaW5nLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9maWxpbmdSZW5kZXJlcigpOiBib29sZWFuIHtcbiAgcmV0dXJuIEJvb2xlYW4oX19ERVZfXyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBZU8sU0FBU0EsYUFBYUEsQ0FBQUMsSUFBQSxFQVVwQjtFQUFBLElBVFBDLE9BQU8sR0FBQUQsSUFBQSxDQUFQQyxPQUFPO0lBQ1BDLE9BQU8sR0FBQUYsSUFBQSxDQUFQRSxPQUFPO0lBQ1BDLFNBQVMsR0FBQUgsSUFBQSxDQUFURyxTQUFTO0lBQ1RDLGlCQUFpQixHQUFBSixJQUFBLENBQWpCSSxpQkFBaUI7RUFPakIsSUFBSUQsU0FBUyxFQUFFO0lBQ2JFLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDQyxNQUFNLENBQzdDTCxPQUFPLEVBQ1BDLE9BQU8sRUFDUCxJQUFJLEVBQ0pFLGlCQUNGLENBQUM7RUFDSCxDQUFDLE1BQU07SUFDTEMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNDLE1BQU0sQ0FBQ0wsT0FBTyxFQUFFQyxPQUFPLENBQUM7RUFDbkU7QUFDRjtBQUVPLFNBQVNLLDJCQUEyQkEsQ0FDekNDLGlCQUF1RCxFQUNwQjtFQUNuQyxPQUFPSCxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQ0UsMkJBQTJCLENBQ3pFQyxpQkFDRixDQUFDO0FBQ0g7QUFFTyxTQUFTQyxjQUFjQSxDQUM1QkQsaUJBQXVELEVBQzlDO0VBQ1QsT0FBT0gsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNJLGNBQWMsQ0FDNURELGlCQUNGLENBQUM7QUFDSDtBQUVPLFNBQVNFLGVBQWVBLENBQzdCQyxNQUF3QyxFQUN4Q0MsT0FBZSxFQUNmQyxJQUFrQixFQUNaO0VBQ04sSUFBSUMsTUFBTSxDQUFDQyxhQUFhLEtBQUssSUFBSSxFQUFFO0lBR2pDLE9BQU9WLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDSyxlQUFlLENBQzdEQyxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsSUFDRixDQUFDO0VBQ0gsQ0FBQyxNQUFNO0lBQ0wsT0FBT1IsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNLLGVBQWUsQ0FDN0RDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxJQUNGLENBQUM7RUFDSDtBQUNGO0FBRU8sU0FBU0csc0JBQXNCQSxDQUNwQ0wsTUFBd0MsRUFDeENNLFNBQWlCLEVBQ1g7RUFDTixPQUFPWixPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQ1csc0JBQXNCLENBQ3BFTCxNQUFNLEVBQ05NLFNBQ0YsQ0FBQztBQUNIO0FBTU8sU0FBU0Msd0NBQXdDQSxDQUFDaEIsT0FBZ0IsRUFBRTtFQUV6RSxJQUFNaUIsZUFBdUIsR0FBR2pCLE9BQU87RUFDdkNHLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDYSx3Q0FBd0MsQ0FDL0VDLGVBQ0YsQ0FBQztBQUNIO0FBRU8sU0FBU0MsdUJBQXVCQSxDQUNyQ0MsRUFBYSxFQUNiQyxXQUFjLEVBQ1I7RUFFTixPQUFPakIsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUNlLHVCQUF1QixDQUNyRUMsRUFBRSxFQUNGQyxXQUNGLENBQUM7QUFDSDtBQUVPLFNBQVNDLG1CQUFtQkEsQ0FBQSxFQUFZO0VBQzdDLE9BQU9DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO0FBQ3pCIiwiaWdub3JlTGlzdCI6W119