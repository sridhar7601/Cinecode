8dd2eef9b6c7d794f2f89068a80f7ad9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
function codegenNativeComponent(componentName, options) {
  if (global.RN$Bridgeless === true) {
    var errorMessage = "Native Component '" + componentName + "' that calls codegenNativeComponent was not code generated at build time. Please check its definition.";
    console.error(errorMessage);
  }
  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
  if (options != null && options.paperComponentNameDeprecated != null) {
    if (_UIManager.default.hasViewManagerConfig(componentName)) {
      componentNameInUse = componentName;
    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
      componentNameInUse = options.paperComponentNameDeprecated;
    } else {
      var _options$paperCompone;
      throw new Error(`Failed to find native component for either ${componentName} or ${(_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'}`);
    }
  }
  return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = exports.default = codegenNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsImNvZGVnZW5OYXRpdmVDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwib3B0aW9ucyIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJlcnJvck1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJjb21wb25lbnROYW1lSW5Vc2UiLCJwYXBlckNvbXBvbmVudE5hbWUiLCJwYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkIiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciLCJfb3B0aW9ucyRwYXBlckNvbXBvbmUiLCJFcnJvciIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiY29kZWdlbk5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLy8gVE9ETzogbW92ZSB0aGlzIGZpbGUgdG8gc2hpbXMvUmVhY3ROYXRpdmUgKHJlcXVpcmVzIFJlYWN0IHVwZGF0ZSBhbmQgc3luYylcblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuaW1wb3J0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuXG4vLyBUT0RPOiBpbXBvcnQgZnJvbSBDb2RlZ2VuU2NoZW1hIG9uY2Ugd29ya3NwYWNlcyBhcmUgZW5hYmxlZFxudHlwZSBPcHRpb25zID0gJFJlYWRPbmx5PHt8XG4gIGludGVyZmFjZU9ubHk/OiBib29sZWFuLFxuICBwYXBlckNvbXBvbmVudE5hbWU/OiBzdHJpbmcsXG4gIHBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQ/OiBzdHJpbmcsXG4gIGV4Y2x1ZGVkUGxhdGZvcm1zPzogJFJlYWRPbmx5QXJyYXk8J2lPUycgfCAnYW5kcm9pZCc+LFxufH0+O1xuXG5leHBvcnQgdHlwZSBOYXRpdmVDb21wb25lbnRUeXBlPFQ+ID0gSG9zdENvbXBvbmVudDxUPjtcblxuLy8gSWYgdGhpcyBmdW5jdGlvbiBydW5zIHRoZW4gdGhhdCBtZWFucyB0aGUgdmlldyBjb25maWdzIHdlcmUgbm90XG4vLyBnZW5lcmF0ZWQgYXQgYnVpbGQgdGltZSB1c2luZyBgR2VuZXJhdGVWaWV3Q29uZmlnSnMuanNgLiBUaHVzXG4vLyB3ZSBuZWVkIHRvIGByZXF1aXJlTmF0aXZlQ29tcG9uZW50YCB0byBnZXQgdGhlIHZpZXcgY29uZmlncyBmcm9tIHZpZXcgbWFuYWdlcnMuXG4vLyBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAgaXMgbm90IGF2YWlsYWJsZSBpbiBCcmlkZ2VsZXNzIG1vZGUuXG4vLyBlLmcuIFRoaXMgZnVuY3Rpb24gcnVucyBhdCBydW50aW1lIGlmIGBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50YCB3YXMgbm90IGNhbGxlZFxuLy8gZnJvbSBhIGZpbGUgc3VmZml4ZWQgd2l0aCBOYXRpdmVDb21wb25lbnQuanMuXG5mdW5jdGlvbiBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PFByb3BzPihcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICBvcHRpb25zPzogT3B0aW9ucyxcbik6IE5hdGl2ZUNvbXBvbmVudFR5cGU8UHJvcHM+IHtcbiAgaWYgKGdsb2JhbC5STiRCcmlkZ2VsZXNzID09PSB0cnVlKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICAgIFwiTmF0aXZlIENvbXBvbmVudCAnXCIgK1xuICAgICAgY29tcG9uZW50TmFtZSArXG4gICAgICBcIicgdGhhdCBjYWxscyBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IHdhcyBub3QgY29kZSBnZW5lcmF0ZWQgYXQgYnVpbGQgdGltZS4gUGxlYXNlIGNoZWNrIGl0cyBkZWZpbml0aW9uLlwiO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuXG4gIGxldCBjb21wb25lbnROYW1lSW5Vc2UgPVxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWUgIT0gbnVsbFxuICAgICAgPyBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZVxuICAgICAgOiBjb21wb25lbnROYW1lO1xuXG4gIGlmIChvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkICE9IG51bGwpIHtcbiAgICBpZiAoVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICBjb21wb25lbnROYW1lSW5Vc2UgPSBjb21wb25lbnROYW1lO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQgIT0gbnVsbCAmJlxuICAgICAgVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZClcbiAgICApIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdXG4gICAgICBjb21wb25lbnROYW1lSW5Vc2UgPSBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBmaW5kIG5hdGl2ZSBjb21wb25lbnQgZm9yIGVpdGhlciAke2NvbXBvbmVudE5hbWV9IG9yICR7XG4gICAgICAgICAgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkID8/ICcodW5rbm93biknXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKHJlcXVpcmVOYXRpdmVDb21wb25lbnQ8UHJvcHM+KFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgY29tcG9uZW50TmFtZUluVXNlLFxuICApOiBIb3N0Q29tcG9uZW50PFByb3BzPik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvZGVnZW5OYXRpdmVDb21wb25lbnQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EsSUFBQUEsdUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWtCQSxTQUFTRSxzQkFBc0JBLENBQzdCQyxhQUFxQixFQUNyQkMsT0FBaUIsRUFDVztFQUM1QixJQUFJQyxNQUFNLENBQUNDLGFBQWEsS0FBSyxJQUFJLEVBQUU7SUFDakMsSUFBTUMsWUFBWSxHQUNoQixvQkFBb0IsR0FDcEJKLGFBQWEsR0FDYix3R0FBd0c7SUFDMUdLLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDRixZQUFZLENBQUM7RUFDN0I7RUFFQSxJQUFJRyxrQkFBa0IsR0FDcEJOLE9BQU8sSUFBSUEsT0FBTyxDQUFDTyxrQkFBa0IsSUFBSSxJQUFJLEdBQ3pDUCxPQUFPLENBQUNPLGtCQUFrQixHQUMxQlIsYUFBYTtFQUVuQixJQUFJQyxPQUFPLElBQUksSUFBSSxJQUFJQSxPQUFPLENBQUNRLDRCQUE0QixJQUFJLElBQUksRUFBRTtJQUNuRSxJQUFJQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQ1gsYUFBYSxDQUFDLEVBQUU7TUFDakRPLGtCQUFrQixHQUFHUCxhQUFhO0lBQ3BDLENBQUMsTUFBTSxJQUNMQyxPQUFPLENBQUNRLDRCQUE0QixJQUFJLElBQUksSUFDNUNDLGtCQUFTLENBQUNDLG9CQUFvQixDQUFDVixPQUFPLENBQUNRLDRCQUE0QixDQUFDLEVBQ3BFO01BRUFGLGtCQUFrQixHQUFHTixPQUFPLENBQUNRLDRCQUE0QjtJQUMzRCxDQUFDLE1BQU07TUFBQSxJQUFBRyxxQkFBQTtNQUNMLE1BQU0sSUFBSUMsS0FBSyxDQUNaLDhDQUE2Q2IsYUFBYyxPQUFJLENBQUFZLHFCQUFBLEdBQzlEWCxPQUFPLENBQUNRLDRCQUE0QixZQUFBRyxxQkFBQSxHQUFJLFdBQ3pDLEVBQ0gsQ0FBQztJQUNIO0VBQ0Y7RUFFQSxPQUFRLElBQUFFLCtCQUFzQixFQUU1QlAsa0JBQ0YsQ0FBQztBQUNIO0FBQUMsSUFBQVEsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFY2xCLHNCQUFzQiIsImlnbm9yZUxpc3QiOltdfQ==