c0b779f14321fc1890327c78dd03f0d1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _AnimatedInterpolation = _interopRequireDefault(require("./AnimatedInterpolation"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var AnimatedDiffClamp = exports.default = function (_AnimatedWithChildren) {
  function AnimatedDiffClamp(a, min, max) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedDiffClamp);
    _this = _callSuper(this, AnimatedDiffClamp);
    _this._a = a;
    _this._min = min;
    _this._max = max;
    _this._value = _this._lastValue = _this._a.__getValue();
    return _this;
  }
  (0, _inherits2.default)(AnimatedDiffClamp, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedDiffClamp, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this._a.__makeNative(platformConfig);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDiffClamp.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new _AnimatedInterpolation.default(this, config);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var value = this._a.__getValue();
      var diff = value - this._lastValue;
      this._lastValue = value;
      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
      return this._value;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._a.__removeChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDiffClamp.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'diffclamp',
        input: this._a.__getNativeTag(),
        min: this._min,
        max: this._max
      };
    }
  }]);
}(_AnimatedWithChildren2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldDIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2luaGVyaXRzMiIsIl9BbmltYXRlZEludGVycG9sYXRpb24iLCJfQW5pbWF0ZWRXaXRoQ2hpbGRyZW4yIiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIkFuaW1hdGVkRGlmZkNsYW1wIiwiX0FuaW1hdGVkV2l0aENoaWxkcmVuIiwiYSIsIm1pbiIsIm1heCIsIl90aGlzIiwiX2EiLCJfbWluIiwiX21heCIsIl92YWx1ZSIsIl9sYXN0VmFsdWUiLCJfX2dldFZhbHVlIiwia2V5IiwiX19tYWtlTmF0aXZlIiwicGxhdGZvcm1Db25maWciLCJpbnRlcnBvbGF0ZSIsImNvbmZpZyIsIkFuaW1hdGVkSW50ZXJwb2xhdGlvbiIsImRpZmYiLCJNYXRoIiwiX19hdHRhY2giLCJfX2FkZENoaWxkIiwiX19kZXRhY2giLCJfX3JlbW92ZUNoaWxkIiwiX19nZXROYXRpdmVDb25maWciLCJ0eXBlIiwiaW5wdXQiLCJfX2dldE5hdGl2ZVRhZyIsIkFuaW1hdGVkV2l0aENoaWxkcmVuIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWREaWZmQ2xhbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7UGxhdGZvcm1Db25maWd9IGZyb20gJy4uL0FuaW1hdGVkUGxhdGZvcm1Db25maWcnO1xuaW1wb3J0IHR5cGUge0ludGVycG9sYXRpb25Db25maWdUeXBlfSBmcm9tICcuL0FuaW1hdGVkSW50ZXJwb2xhdGlvbic7XG5pbXBvcnQgdHlwZSBBbmltYXRlZE5vZGUgZnJvbSAnLi9BbmltYXRlZE5vZGUnO1xuXG5pbXBvcnQgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIGZyb20gJy4vQW5pbWF0ZWRJbnRlcnBvbGF0aW9uJztcbmltcG9ydCBBbmltYXRlZFdpdGhDaGlsZHJlbiBmcm9tICcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0ZWREaWZmQ2xhbXAgZXh0ZW5kcyBBbmltYXRlZFdpdGhDaGlsZHJlbiB7XG4gIF9hOiBBbmltYXRlZE5vZGU7XG4gIF9taW46IG51bWJlcjtcbiAgX21heDogbnVtYmVyO1xuICBfdmFsdWU6IG51bWJlcjtcbiAgX2xhc3RWYWx1ZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGE6IEFuaW1hdGVkTm9kZSwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX2EgPSBhO1xuICAgIHRoaXMuX21pbiA9IG1pbjtcbiAgICB0aGlzLl9tYXggPSBtYXg7XG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9sYXN0VmFsdWUgPSB0aGlzLl9hLl9fZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIF9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZzogP1BsYXRmb3JtQ29uZmlnKSB7XG4gICAgdGhpcy5fYS5fX21ha2VOYXRpdmUocGxhdGZvcm1Db25maWcpO1xuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZyk7XG4gIH1cblxuICBpbnRlcnBvbGF0ZTxPdXRwdXRUOiBudW1iZXIgfCBzdHJpbmc+KFxuICAgIGNvbmZpZzogSW50ZXJwb2xhdGlvbkNvbmZpZ1R5cGU8T3V0cHV0VD4sXG4gICk6IEFuaW1hdGVkSW50ZXJwb2xhdGlvbjxPdXRwdXRUPiB7XG4gICAgcmV0dXJuIG5ldyBBbmltYXRlZEludGVycG9sYXRpb24odGhpcywgY29uZmlnKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2EuX19nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IGRpZmYgPSB2YWx1ZSAtIHRoaXMuX2xhc3RWYWx1ZTtcbiAgICB0aGlzLl9sYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLl92YWx1ZSA9IE1hdGgubWluKE1hdGgubWF4KHRoaXMuX3ZhbHVlICsgZGlmZiwgdGhpcy5fbWluKSwgdGhpcy5fbWF4KTtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9hLl9fYWRkQ2hpbGQodGhpcyk7XG4gIH1cblxuICBfX2RldGFjaCgpOiB2b2lkIHtcbiAgICB0aGlzLl9hLl9fcmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkaWZmY2xhbXAnLFxuICAgICAgaW5wdXQ6IHRoaXMuX2EuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgIG1pbjogdGhpcy5fbWluLFxuICAgICAgbWF4OiB0aGlzLl9tYXgsXG4gICAgfTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQUMsTUFBQSxDQUFB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