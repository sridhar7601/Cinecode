{"version":3,"names":["ReactNativeFeatureFlags","isLayoutAnimationEnabled","shouldEmitW3CPointerEvents","shouldPressibilityUseW3CPointerEventsForHover","animatedShouldDebounceQueueFlush","animatedShouldUseSingleOp","isGlobalWebPerformanceLoggerEnabled","undefined","enableAccessToHostTreeInFabric","shouldUseAnimatedObjectForTransform","shouldUseSetNativePropsInFabric","shouldForceUnflattenForElevation","module","exports"],"sources":["ReactNativeFeatureFlags.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport type FeatureFlags = {|\n  /**\n   * Function used to enable / disabled Layout Animations in React Native.\n   * Default value = true.\n   */\n  isLayoutAnimationEnabled: () => boolean,\n  /**\n   * Function used to enable / disable W3C pointer event emitting in React Native.\n   * If enabled you must also flip the equivalent native flags on each platform:\n   * iOS -> RCTSetDispatchW3CPointerEvents\n   * Android -> ReactFeatureFlags.dispatchPointerEvents\n   */\n  shouldEmitW3CPointerEvents: () => boolean,\n  /**\n   * Function used to enable / disable Pressibility from using W3C Pointer Events\n   * for its hover callbacks\n   */\n  shouldPressibilityUseW3CPointerEventsForHover: () => boolean,\n  /**\n   * Enables an experimental flush-queue debouncing in Animated.js.\n   */\n  animatedShouldDebounceQueueFlush: () => boolean,\n  /**\n   * Enables an experimental mega-operation for Animated.js that replaces\n   * many calls to native with a single call into native, to reduce JSI/JNI\n   * traffic.\n   */\n  animatedShouldUseSingleOp: () => boolean,\n  /**\n   * Enables GlobalPerformanceLogger replacement with a WebPerformance API based\n   * implementation. Tri-state due to being sensitive to initialization order\n   * vs the platform-specific ReactNativeFeatureFlags implementation.\n   */\n  isGlobalWebPerformanceLoggerEnabled: () => ?boolean,\n  /**\n   * Enables access to the host tree in Fabric using DOM-compatible APIs.\n   */\n  enableAccessToHostTreeInFabric: () => boolean,\n  /**\n   * Enables use of AnimatedObject for animating transform values.\n   */\n  shouldUseAnimatedObjectForTransform: () => boolean,\n  /**\n   * Enables use of setNativeProps in JS driven animations.\n   */\n  shouldUseSetNativePropsInFabric: () => boolean,\n  /**\n   * Enables a hotfix for forcing materialization of views with elevation set.\n   */\n  shouldForceUnflattenForElevation: () => boolean,\n|};\n\nconst ReactNativeFeatureFlags: FeatureFlags = {\n  isLayoutAnimationEnabled: () => true,\n  shouldEmitW3CPointerEvents: () => false,\n  shouldPressibilityUseW3CPointerEventsForHover: () => false,\n  animatedShouldDebounceQueueFlush: () => false,\n  animatedShouldUseSingleOp: () => false,\n  isGlobalWebPerformanceLoggerEnabled: () => undefined,\n  enableAccessToHostTreeInFabric: () => false,\n  shouldUseAnimatedObjectForTransform: () => false,\n  shouldUseSetNativePropsInFabric: () => false,\n  shouldForceUnflattenForElevation: () => false,\n};\n\nmodule.exports = ReactNativeFeatureFlags;\n"],"mappings":"AA8DA,IAAMA,uBAAqC,GAAG;EAC5CC,wBAAwB,EAAE,SAAAA,yBAAA;IAAA,OAAM,IAAI;EAAA;EACpCC,0BAA0B,EAAE,SAAAA,2BAAA;IAAA,OAAM,KAAK;EAAA;EACvCC,6CAA6C,EAAE,SAAAA,8CAAA;IAAA,OAAM,KAAK;EAAA;EAC1DC,gCAAgC,EAAE,SAAAA,iCAAA;IAAA,OAAM,KAAK;EAAA;EAC7CC,yBAAyB,EAAE,SAAAA,0BAAA;IAAA,OAAM,KAAK;EAAA;EACtCC,mCAAmC,EAAE,SAAAA,oCAAA;IAAA,OAAMC,SAAS;EAAA;EACpDC,8BAA8B,EAAE,SAAAA,+BAAA;IAAA,OAAM,KAAK;EAAA;EAC3CC,mCAAmC,EAAE,SAAAA,oCAAA;IAAA,OAAM,KAAK;EAAA;EAChDC,+BAA+B,EAAE,SAAAA,gCAAA;IAAA,OAAM,KAAK;EAAA;EAC5CC,gCAAgC,EAAE,SAAAA,iCAAA;IAAA,OAAM,KAAK;EAAA;AAC/C,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGb,uBAAuB","ignoreList":[]}