d2acc08351e960702316914a5dd8ff46
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAnimatedProps;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _ReactFabricPublicInstanceUtils = require("../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils");
var _ReactNativeFeatureFlags = _interopRequireDefault(require("../ReactNative/ReactNativeFeatureFlags"));
var _useRefEffect = _interopRequireDefault(require("../Utilities/useRefEffect"));
var _AnimatedEvent = require("./AnimatedEvent");
var _NativeAnimatedHelper = _interopRequireDefault(require("./NativeAnimatedHelper"));
var _AnimatedProps = _interopRequireDefault(require("./nodes/AnimatedProps"));
var _react = require("react");
function useAnimatedProps(props) {
  var _useReducer = (0, _react.useReducer)(function (count) {
      return count + 1;
    }, 0),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    scheduleUpdate = _useReducer2[1];
  var onUpdateRef = (0, _react.useRef)(null);
  var node = (0, _react.useMemo)(function () {
    return new _AnimatedProps.default(props, function () {
      return onUpdateRef.current == null ? void 0 : onUpdateRef.current();
    });
  }, [props]);
  var useNativePropsInFabric = _ReactNativeFeatureFlags.default.shouldUseSetNativePropsInFabric();
  useAnimatedPropsLifecycle(node);
  var refEffect = (0, _react.useCallback)(function (instance) {
    node.setNativeView(instance);
    onUpdateRef.current = function () {
      if (process.env.NODE_ENV === 'test' || typeof instance !== 'object' || typeof (instance == null ? void 0 : instance.setNativeProps) !== 'function' || isFabricInstance(instance) && !useNativePropsInFabric) {
        scheduleUpdate();
      } else if (!node.__isNative) {
        instance.setNativeProps(node.__getAnimatedValue());
      }
    };
    var target = getEventTarget(instance);
    var events = [];
    for (var propName in props) {
      var propValue = props[propName];
      if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
        propValue.__attach(target, propName);
        events.push([propName, propValue]);
      }
    }
    return function () {
      onUpdateRef.current = null;
      for (var _ref of events) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var _propName = _ref2[0];
        var _propValue = _ref2[1];
        _propValue.__detach(target, _propName);
      }
    };
  }, [props, node, useNativePropsInFabric]);
  var callbackRef = (0, _useRefEffect.default)(refEffect);
  return [reduceAnimatedProps(node), callbackRef];
}
function reduceAnimatedProps(node) {
  return Object.assign({}, node.__getValue(), {
    collapsable: false
  });
}
function useAnimatedPropsLifecycle(node) {
  var prevNodeRef = (0, _react.useRef)(null);
  var isUnmountingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    _NativeAnimatedHelper.default.API.flushQueue();
  });
  (0, _react.useLayoutEffect)(function () {
    isUnmountingRef.current = false;
    return function () {
      isUnmountingRef.current = true;
    };
  }, []);
  (0, _react.useLayoutEffect)(function () {
    node.__attach();
    if (prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues();
      prevNode.__detach();
      prevNodeRef.current = null;
    }
    return function () {
      if (isUnmountingRef.current) {
        node.__detach();
      } else {
        prevNodeRef.current = node;
      }
    };
  }, [node]);
}
function getEventTarget(instance) {
  return typeof instance === 'object' && typeof (instance == null ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
function isFabricInstance(instance) {
  var _instance$getScrollRe;
  return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null ? void 0 : instance.getNativeScrollRef == null ? void 0 : instance.getNativeScrollRef()) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null ? void 0 : instance.getScrollResponder == null ? void 0 : (_instance$getScrollRe = instance.getScrollResponder()) == null ? void 0 : _instance$getScrollRe.getNativeScrollRef == null ? void 0 : _instance$getScrollRe.getNativeScrollRef());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInVzZUFuaW1hdGVkUHJvcHMiLCJfc2xpY2VkVG9BcnJheTIiLCJfUmVhY3RGYWJyaWNQdWJsaWNJbnN0YW5jZVV0aWxzIiwiX1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzIiwiX3VzZVJlZkVmZmVjdCIsIl9BbmltYXRlZEV2ZW50IiwiX05hdGl2ZUFuaW1hdGVkSGVscGVyIiwiX0FuaW1hdGVkUHJvcHMiLCJfcmVhY3QiLCJwcm9wcyIsIl91c2VSZWR1Y2VyIiwidXNlUmVkdWNlciIsImNvdW50IiwiX3VzZVJlZHVjZXIyIiwic2NoZWR1bGVVcGRhdGUiLCJvblVwZGF0ZVJlZiIsInVzZVJlZiIsIm5vZGUiLCJ1c2VNZW1vIiwiQW5pbWF0ZWRQcm9wcyIsImN1cnJlbnQiLCJ1c2VOYXRpdmVQcm9wc0luRmFicmljIiwiUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MiLCJzaG91bGRVc2VTZXROYXRpdmVQcm9wc0luRmFicmljIiwidXNlQW5pbWF0ZWRQcm9wc0xpZmVjeWNsZSIsInJlZkVmZmVjdCIsInVzZUNhbGxiYWNrIiwiaW5zdGFuY2UiLCJzZXROYXRpdmVWaWV3IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwic2V0TmF0aXZlUHJvcHMiLCJpc0ZhYnJpY0luc3RhbmNlIiwiX19pc05hdGl2ZSIsIl9fZ2V0QW5pbWF0ZWRWYWx1ZSIsInRhcmdldCIsImdldEV2ZW50VGFyZ2V0IiwiZXZlbnRzIiwicHJvcE5hbWUiLCJwcm9wVmFsdWUiLCJBbmltYXRlZEV2ZW50IiwiX19hdHRhY2giLCJwdXNoIiwiX3JlZiIsIl9yZWYyIiwiX19kZXRhY2giLCJjYWxsYmFja1JlZiIsInVzZVJlZkVmZmVjdCIsInJlZHVjZUFuaW1hdGVkUHJvcHMiLCJhc3NpZ24iLCJfX2dldFZhbHVlIiwiY29sbGFwc2FibGUiLCJwcmV2Tm9kZVJlZiIsImlzVW5tb3VudGluZ1JlZiIsInVzZUVmZmVjdCIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiQVBJIiwiZmx1c2hRdWV1ZSIsInVzZUxheW91dEVmZmVjdCIsInByZXZOb2RlIiwiX19yZXN0b3JlRGVmYXVsdFZhbHVlcyIsImdldFNjcm9sbGFibGVOb2RlIiwiX2luc3RhbmNlJGdldFNjcm9sbFJlIiwiaXNGYWJyaWNQdWJsaWNJbnN0YW5jZSIsImdldE5hdGl2ZVNjcm9sbFJlZiIsImdldFNjcm9sbFJlc3BvbmRlciJdLCJzb3VyY2VzIjpbInVzZUFuaW1hdGVkUHJvcHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtpc1B1YmxpY0luc3RhbmNlIGFzIGlzRmFicmljUHVibGljSW5zdGFuY2V9IGZyb20gJy4uL1JlYWN0TmF0aXZlL1JlYWN0RmFicmljUHVibGljSW5zdGFuY2UvUmVhY3RGYWJyaWNQdWJsaWNJbnN0YW5jZVV0aWxzJztcbmltcG9ydCBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyBmcm9tICcuLi9SZWFjdE5hdGl2ZS9SZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyc7XG5pbXBvcnQgdXNlUmVmRWZmZWN0IGZyb20gJy4uL1V0aWxpdGllcy91c2VSZWZFZmZlY3QnO1xuaW1wb3J0IHtBbmltYXRlZEV2ZW50fSBmcm9tICcuL0FuaW1hdGVkRXZlbnQnO1xuaW1wb3J0IE5hdGl2ZUFuaW1hdGVkSGVscGVyIGZyb20gJy4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInO1xuaW1wb3J0IEFuaW1hdGVkUHJvcHMgZnJvbSAnLi9ub2Rlcy9BbmltYXRlZFByb3BzJztcbmltcG9ydCB7XG4gIHVzZUNhbGxiYWNrLFxuICB1c2VFZmZlY3QsXG4gIHVzZUxheW91dEVmZmVjdCxcbiAgdXNlTWVtbyxcbiAgdXNlUmVkdWNlcixcbiAgdXNlUmVmLFxufSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUmVkdWNlZFByb3BzPFRQcm9wcz4gPSB7XG4gIC4uLlRQcm9wcyxcbiAgY29sbGFwc2FibGU6IGJvb2xlYW4sXG4gIC4uLlxufTtcbnR5cGUgQ2FsbGJhY2tSZWY8VD4gPSBUID0+IG1peGVkO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VBbmltYXRlZFByb3BzPFRQcm9wczogey4uLn0sIFRJbnN0YW5jZT4oXG4gIHByb3BzOiBUUHJvcHMsXG4pOiBbUmVkdWNlZFByb3BzPFRQcm9wcz4sIENhbGxiYWNrUmVmPFRJbnN0YW5jZSB8IG51bGw+XSB7XG4gIGNvbnN0IFssIHNjaGVkdWxlVXBkYXRlXSA9IHVzZVJlZHVjZXI8bnVtYmVyLCB2b2lkPihjb3VudCA9PiBjb3VudCArIDEsIDApO1xuICBjb25zdCBvblVwZGF0ZVJlZiA9IHVzZVJlZjw/KCkgPT4gdm9pZD4obnVsbCk7XG5cbiAgLy8gVE9ETzogT25seSBpbnZhbGlkYXRlIGBub2RlYCBpZiBhbmltYXRlZCBwcm9wcyBvciBgc3R5bGVgIGNoYW5nZS4gSW4gdGhlXG4gIC8vIHByZXZpb3VzIGltcGxlbWVudGF0aW9uLCB3ZSBwZXJtaXR0ZWQgYHN0eWxlYCB0byBvdmVycmlkZSBwcm9wcyB3aXRoIHRoZVxuICAvLyBzYW1lIG5hbWUgcHJvcGVydHkgbmFtZSBhcyBzdHlsZXMsIHNvIHdlIGNhbiBwcm9iYWJseSBjb250aW51ZSBkb2luZyB0aGF0LlxuICAvLyBUaGUgb3JkZXJpbmcgb2Ygb3RoZXIgcHJvcHMgKnNob3VsZCogbm90IG1hdHRlci5cbiAgY29uc3Qgbm9kZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gbmV3IEFuaW1hdGVkUHJvcHMocHJvcHMsICgpID0+IG9uVXBkYXRlUmVmLmN1cnJlbnQ/LigpKSxcbiAgICBbcHJvcHNdLFxuICApO1xuICBjb25zdCB1c2VOYXRpdmVQcm9wc0luRmFicmljID1cbiAgICBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncy5zaG91bGRVc2VTZXROYXRpdmVQcm9wc0luRmFicmljKCk7XG4gIHVzZUFuaW1hdGVkUHJvcHNMaWZlY3ljbGUobm9kZSk7XG5cbiAgLy8gVE9ETzogVGhpcyBcImVmZmVjdFwiIGRvZXMgdGhyZWUgdGhpbmdzOlxuICAvL1xuICAvLyAgIDEpIENhbGwgYHNldE5hdGl2ZVZpZXdgLlxuICAvLyAgIDIpIFVwZGF0ZSBgb25VcGRhdGVSZWZgLlxuICAvLyAgIDMpIFVwZGF0ZSBsaXN0ZW5lcnMgZm9yIGBBbmltYXRlZEV2ZW50YCBwcm9wcy5cbiAgLy9cbiAgLy8gSWRlYWxseSwgZWFjaCBvZiB0aGVzZSB3b3VsZCBiZSBzZXBhcmF0ZSBcImVmZmVjdHNcIiBzbyB0aGF0IHRoZXkgYXJlIG5vdFxuICAvLyB1bm5lY2Vzc2FyaWx5IHJlLXJ1biB3aGVuIGlycmVsZXZhbnQgZGVwZW5kZW5jaWVzIGNoYW5nZS4gRm9yIGV4YW1wbGUsIHdlXG4gIC8vIHNob3VsZCBiZSBhYmxlIHRvIGhvaXN0IGFsbCBgQW5pbWF0ZWRFdmVudGAgcHJvcHMgYW5kIG9ubHkgZG8gIzMgaWYgZWl0aGVyXG4gIC8vIHRoZSBgQW5pbWF0ZWRFdmVudGAgcHJvcHMgY2hhbmdlIG9yIGBpbnN0YW5jZWAgY2hhbmdlcy5cbiAgLy9cbiAgLy8gQnV0IHRoZXJlIGlzIG5vIHdheSB0byB0cmFuc3BhcmVudGx5IGNvbXBvc2UgdGhyZWUgc2VwYXJhdGUgY2FsbGJhY2sgcmVmcyxcbiAgLy8gc28gd2UganVzdCBjb21iaW5lIHRoZW0gYWxsIGludG8gb25lIGZvciBub3cuXG4gIGNvbnN0IHJlZkVmZmVjdCA9IHVzZUNhbGxiYWNrKFxuICAgIChpbnN0YW5jZTogVEluc3RhbmNlKSA9PiB7XG4gICAgICAvLyBOT1RFOiBUaGlzIG1heSBiZSBjYWxsZWQgbW9yZSBvZnRlbiB0aGFuIG5lY2Vzc2FyeSAoZS5nLiB3aGVuIGBwcm9wc2BcbiAgICAgIC8vIGNoYW5nZXMpLCBidXQgYHNldE5hdGl2ZVZpZXdgIGFscmVhZHkgb3B0aW1pemVzIGZvciB0aGF0LlxuICAgICAgbm9kZS5zZXROYXRpdmVWaWV3KGluc3RhbmNlKTtcblxuICAgICAgLy8gTk9URTogV2hlbiB1c2luZyB0aGUgSlMgYW5pbWF0aW9uIGRyaXZlciwgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgb25cbiAgICAgIC8vIGV2ZXJ5IGFuaW1hdGlvbiBmcmFtZS4gV2hlbiB1c2luZyB0aGUgbmF0aXZlIGRyaXZlciwgdGhpcyBjYWxsYmFjayBpc1xuICAgICAgLy8gY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXMuXG4gICAgICBvblVwZGF0ZVJlZi5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyB8fFxuICAgICAgICAgIHR5cGVvZiBpbnN0YW5jZSAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICB0eXBlb2YgaW5zdGFuY2U/LnNldE5hdGl2ZVByb3BzICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgKGlzRmFicmljSW5zdGFuY2UoaW5zdGFuY2UpICYmICF1c2VOYXRpdmVQcm9wc0luRmFicmljKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBTY2hlZHVsZSBhbiB1cGRhdGUgZm9yIHRoaXMgY29tcG9uZW50IHRvIHVwZGF0ZSBgcmVkdWNlZFByb3BzYCxcbiAgICAgICAgICAvLyBidXQgZG8gbm90IGNvbXB1dGUgaXQgaW1tZWRpYXRlbHkuIElmIGEgcGFyZW50IGFsc28gdXBkYXRlZCwgd2VcbiAgICAgICAgICAvLyBuZWVkIHRvIG1lcmdlIHRob3NlIG5ldyBwcm9wcyBpbiBiZWZvcmUgdXBkYXRpbmcuXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgfSBlbHNlIGlmICghbm9kZS5fX2lzTmF0aXZlKSB7XG4gICAgICAgICAgLy8gJEZsb3dJZ25vcmVbbm90LWEtZnVuY3Rpb25dIC0gQXNzdW1lIGl0J3Mgc3RpbGwgYSBmdW5jdGlvbi5cbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgICAgaW5zdGFuY2Uuc2V0TmF0aXZlUHJvcHMobm9kZS5fX2dldEFuaW1hdGVkVmFsdWUoKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGluc3RhbmNlKTtcbiAgICAgIGNvbnN0IGV2ZW50cyA9IFtdO1xuXG4gICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkRXZlbnQgJiYgcHJvcFZhbHVlLl9faXNOYXRpdmUpIHtcbiAgICAgICAgICBwcm9wVmFsdWUuX19hdHRhY2godGFyZ2V0LCBwcm9wTmFtZSk7XG4gICAgICAgICAgZXZlbnRzLnB1c2goW3Byb3BOYW1lLCBwcm9wVmFsdWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBvblVwZGF0ZVJlZi5jdXJyZW50ID0gbnVsbDtcblxuICAgICAgICBmb3IgKGNvbnN0IFtwcm9wTmFtZSwgcHJvcFZhbHVlXSBvZiBldmVudHMpIHtcbiAgICAgICAgICBwcm9wVmFsdWUuX19kZXRhY2godGFyZ2V0LCBwcm9wTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBbcHJvcHMsIG5vZGUsIHVzZU5hdGl2ZVByb3BzSW5GYWJyaWNdLFxuICApO1xuICBjb25zdCBjYWxsYmFja1JlZiA9IHVzZVJlZkVmZmVjdDxUSW5zdGFuY2U+KHJlZkVmZmVjdCk7XG5cbiAgcmV0dXJuIFtyZWR1Y2VBbmltYXRlZFByb3BzPFRQcm9wcz4obm9kZSksIGNhbGxiYWNrUmVmXTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlQW5pbWF0ZWRQcm9wczxUUHJvcHM+KFxuICBub2RlOiBBbmltYXRlZFByb3BzLFxuKTogUmVkdWNlZFByb3BzPFRQcm9wcz4ge1xuICAvLyBGb3JjZSBgY29sbGFwc2FibGVgIHRvIGJlIGZhbHNlIHNvIHRoYXQgdGhlIG5hdGl2ZSB2aWV3IGlzIG5vdCBmbGF0dGVuZWQuXG4gIC8vIEZsYXR0ZW5lZCB2aWV3cyBjYW5ub3QgYmUgYWNjdXJhdGVseSByZWZlcmVuY2VkIGJ5IHRoZSBuYXRpdmUgZHJpdmVyLlxuICByZXR1cm4ge1xuICAgIC4uLm5vZGUuX19nZXRWYWx1ZSgpLFxuICAgIGNvbGxhcHNhYmxlOiBmYWxzZSxcbiAgfTtcbn1cblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBsaWZlY3ljbGUgb2YgdGhlIHN1cHBsaWVkIGBBbmltYXRlZFByb3BzYCBieSBpbnZva2luZyBgX19hdHRhY2hgXG4gKiBhbmQgYF9fZGV0YWNoYC4gSG93ZXZlciwgdGhpcyBpcyBtb3JlIGNvbXBsaWNhdGVkIGJlY2F1c2UgYEFuaW1hdGVkUHJvcHNgXG4gKiB1c2VzIHJlZmVyZW5jZSBjb3VudGluZyB0byBkZXRlcm1pbmUgd2hlbiB0byByZWN1cnNpdmVseSBkZXRhY2ggaXRzIGNoaWxkcmVuXG4gKiBub2Rlcy4gU28gaW4gb3JkZXIgdG8gb3B0aW1pemUgdGhpcywgd2UgYXZvaWQgZGV0YWNoaW5nIHVudGlsIHRoZSBuZXh0IGF0dGFjaFxuICogdW5sZXNzIHdlIGFyZSB1bm1vdW50aW5nLlxuICovXG5mdW5jdGlvbiB1c2VBbmltYXRlZFByb3BzTGlmZWN5Y2xlKG5vZGU6IEFuaW1hdGVkUHJvcHMpOiB2b2lkIHtcbiAgY29uc3QgcHJldk5vZGVSZWYgPSB1c2VSZWY8P0FuaW1hdGVkUHJvcHM+KG51bGwpO1xuICBjb25zdCBpc1VubW91bnRpbmdSZWYgPSB1c2VSZWY8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXQgaXMgb2sgZm9yIG11bHRpcGxlIGNvbXBvbmVudHMgdG8gY2FsbCBgZmx1c2hRdWV1ZWAgYmVjYXVzZSBpdCBub29wc1xuICAgIC8vIGlmIHRoZSBxdWV1ZSBpcyBlbXB0eS4gV2hlbiBtdWx0aXBsZSBhbmltYXRlZCBjb21wb25lbnRzIGFyZSBtb3VudGVkIGF0XG4gICAgLy8gdGhlIHNhbWUgdGltZS4gT25seSBmaXJzdCBjb21wb25lbnQgZmx1c2hlcyB0aGUgcXVldWUgYW5kIHRoZSBvdGhlcnMgd2lsbCBub29wLlxuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5mbHVzaFF1ZXVlKCk7XG4gIH0pO1xuXG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaXNVbm1vdW50aW5nUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaXNVbm1vdW50aW5nUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIG5vZGUuX19hdHRhY2goKTtcbiAgICBpZiAocHJldk5vZGVSZWYuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBwcmV2Tm9kZSA9IHByZXZOb2RlUmVmLmN1cnJlbnQ7XG4gICAgICAvLyBUT0RPOiBTdG9wIHJlc3RvcmluZyBkZWZhdWx0IHZhbHVlcyAodW5sZXNzIGByZXNldGAgaXMgY2FsbGVkKS5cbiAgICAgIHByZXZOb2RlLl9fcmVzdG9yZURlZmF1bHRWYWx1ZXMoKTtcbiAgICAgIHByZXZOb2RlLl9fZGV0YWNoKCk7XG4gICAgICBwcmV2Tm9kZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChpc1VubW91bnRpbmdSZWYuY3VycmVudCkge1xuICAgICAgICAvLyBOT1RFOiBEbyBub3QgcmVzdG9yZSBkZWZhdWx0IHZhbHVlcyBvbiB1bm1vdW50LCBzZWUgRDE4MTk3NzM1LlxuICAgICAgICBub2RlLl9fZGV0YWNoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2Tm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbbm9kZV0pO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldDxUSW5zdGFuY2U+KGluc3RhbmNlOiBUSW5zdGFuY2UpOiBUSW5zdGFuY2Uge1xuICByZXR1cm4gdHlwZW9mIGluc3RhbmNlID09PSAnb2JqZWN0JyAmJlxuICAgIHR5cGVvZiBpbnN0YW5jZT8uZ2V0U2Nyb2xsYWJsZU5vZGUgPT09ICdmdW5jdGlvbidcbiAgICA/IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV0gLSBMZWdhY3kgaW5zdGFuY2UgYXNzdW1wdGlvbnMuXG4gICAgICBpbnN0YW5jZS5nZXRTY3JvbGxhYmxlTm9kZSgpXG4gICAgOiBpbnN0YW5jZTtcbn1cblxuLy8gJEZsb3dGaXhNZVt1bmNsZWFyLXR5cGVdIC0gTGVnYWN5IGluc3RhbmNlIGFzc3VtcHRpb25zLlxuZnVuY3Rpb24gaXNGYWJyaWNJbnN0YW5jZShpbnN0YW5jZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgaXNGYWJyaWNQdWJsaWNJbnN0YW5jZShpbnN0YW5jZSkgfHxcbiAgICAvLyBTb21lIGNvbXBvbmVudHMgaGF2ZSBhIHNldE5hdGl2ZVByb3BzIGZ1bmN0aW9uIGJ1dCBhcmVuJ3QgYSBob3N0IGNvbXBvbmVudFxuICAgIC8vIHN1Y2ggYXMgbGlzdHMgbGlrZSBGbGF0TGlzdCBhbmQgU2VjdGlvbkxpc3QuIFRoZXNlIHNob3VsZCBhbHNvIHVzZVxuICAgIC8vIGZvcmNlVXBkYXRlIGluIEZhYnJpYyBzaW5jZSBzZXROYXRpdmVQcm9wcyBkb2Vzbid0IGV4aXN0IG9uIHRoZSB1bmRlcmx5aW5nXG4gICAgLy8gaG9zdCBjb21wb25lbnQuIFRoaXMgY3JhenkgaGFjayBpcyBlc3NlbnRpYWxseSBzcGVjaWFsIGNhc2luZyB0aG9zZSBsaXN0cyBhbmRcbiAgICAvLyBTY3JvbGxWaWV3IGl0c2VsZiB0byB1c2UgZm9yY2VVcGRhdGUgaW4gRmFicmljLlxuICAgIC8vIElmIHRoZXNlIGNvbXBvbmVudHMgZW5kIHVwIHVzaW5nIGZvcndhcmRSZWYgdGhlbiB0aGVzZSBoYWNrcyBjYW4gZ28gYXdheVxuICAgIC8vIGFzIGluc3RhbmNlIHdvdWxkIGFjdHVhbGx5IGJlIHRoZSB1bmRlcmx5aW5nIGhvc3QgY29tcG9uZW50IGFuZCB0aGUgYWJvdmUgY2hlY2tcbiAgICAvLyB3b3VsZCBiZSBzdWZmaWNpZW50LlxuICAgIGlzRmFicmljUHVibGljSW5zdGFuY2UoaW5zdGFuY2U/LmdldE5hdGl2ZVNjcm9sbFJlZj8uKCkpIHx8XG4gICAgaXNGYWJyaWNQdWJsaWNJbnN0YW5jZShcbiAgICAgIGluc3RhbmNlPy5nZXRTY3JvbGxSZXNwb25kZXI/LigpPy5nZXROYXRpdmVTY3JvbGxSZWY/LigpLFxuICAgIClcbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLE9BQUEsR0FBQUMsZ0JBQUE7QUFBQSxJQUFBQyxlQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFFYixJQUFBUSwrQkFBQSxHQUFBUixPQUFBO0FBQ0EsSUFBQVMsd0JBQUEsR0FBQVYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFVLGFBQUEsR0FBQVgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFXLGNBQUEsR0FBQVgsT0FBQTtBQUNBLElBQUFZLHFCQUFBLEdBQUFiLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBYSxjQUFBLEdBQUFkLHNC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